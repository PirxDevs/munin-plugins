#!/usr/bin/perl
# -*- perl -*-

# Copyright (C) 2015 Pirx Developers - https://pirx.dev/
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=head1 NAME

hq_dell_omsa - Munin plugin to monitor Dell hardware fan and temperature
sensors using OpenManage Server Administrator.

=head1 APPLICABLE SYSTEMS

Linux systems with Dell OpenManage Server Administrator installed and
mreport command available.

=head1 CONFIGURATION

You may need to specify path to omreport binary if its not on PATH:

[hq_dell_omsa]
  env.omreport /opt/dell/srvadmin/bin/omreport

=head1 VERSION

  20170104

=head1 MAGIC MARKERS

  #%# family=manual
  #%# capabilities=autoconf

=head1 BUGS

None.

=head1 AUTHOR

Pirx Developers - https://pirx.dev/

=head1 LICENSE

GPLv3

=cut

use strict;
use warnings;
use Munin::Plugin;

# Handle autoconf
if(defined($ARGV[0]) and $ARGV[0] eq 'autoconf') {
  print("yes\n");
  exit(0);
}

need_multigraph();

my %sensors;
my $exec_fd;

my $omreport;
$omreport = $ENV{'omreport'} || "omreport";

# Get fan sensors
if(open($exec_fd, $omreport . " chassis fans -fmt ssv 2>/dev/null |")) {
  OMREPORT_READ_LOOP: while(defined(my $line=<$exec_fd>)) {
    # Exclude headers
    if(not $line =~ m/^([0-9]+)\;/) {
      next(OMREPORT_READ_LOOP);
    }
  $line =~ s/( RPM|\[N\/A\])//g;
  $line =~ s/\n/;/g;
  my @fans = split(/;/, $line);
  $sensors{'fans'}{$fans[0]}{'name'} = $fans[2];
  $sensors{'fans'}{$fans[0]}{'value'} = $fans[3];
  $sensors{'fans'}{$fans[0]}{'warning'} = $fans[6];
  }
  close($exec_fd);
  if($? >> 8 != 0) {
    print("Error running omreport. Exiting.\n");
    exit(1);
  }
}
else {
  print("Error running omreport. Exiting.\n");
  exit(1);
}

# Get temperature sensors
if(open($exec_fd, $omreport . " chassis temps -fmt ssv 2>/dev/null |")) {
  OMREPORT_READ_LOOP: while(defined(my $line=<$exec_fd>)) {
    # Exclude headers
    if(not $line =~ m/^([0-9]+)\;/) {
      next(OMREPORT_READ_LOOP);
    }
  $line =~ s/( C|\[N\/A\])//g;
  $line =~ s/\n/;/g;
  my @temps = split(/;/, $line);
  $sensors{'temps'}{$temps[0]}{'name'} = $temps[2];
  $sensors{'temps'}{$temps[0]}{'value'} = $temps[3];
  $sensors{'temps'}{$temps[0]}{'warning_min'} = $temps[4];
  $sensors{'temps'}{$temps[0]}{'warning_max'} = $temps[5];
  $sensors{'temps'}{$temps[0]}{'critical_min'} = $temps[6];
  $sensors{'temps'}{$temps[0]}{'critical_max'} = $temps[7];
  }
  close($exec_fd);
  if($? >> 8 != 0) {
    print("Error running omreport. Exiting.\n");
    exit(1);
  }
}
else {
  print("Error running omreport. Exiting.\n");
  exit(1);
}

# Handle config
if(defined($ARGV[0]) and $ARGV[0] eq 'config') {
  if(defined($sensors{'fans'}) and scalar(keys %{$sensors{'fans'}})) {
    print <<EOF;
multigraph dell_omsa_fans
graph_title Fans reported by Dell OMSA
graph_args --base 1000 --lower-limit 0
graph_scale no
graph_vlabel RPM
graph_category sensors
EOF
    foreach my $fan (sort keys %{$sensors{'fans'}}) {
      print <<EOF;
fan_$fan\_rpm.label $sensors{'fans'}{$fan}{'name'}
fan_$fan\_rpm.type GAUGE
fan_$fan\_rpm.draw LINE2
EOF
      if(defined($sensors{'fans'}{$fan}{'warning'}) and $sensors{'fans'}{$fan}{'warning'} ne "") {
        print <<EOF;
fan_$fan\_rpm.critical $sensors{'fans'}{$fan}{'warning'}:
EOF
      }
    }
  }
  if(defined($sensors{'temps'}) and scalar(keys %{$sensors{'temps'}})) {
    print <<EOF;
multigraph dell_omsa_temperatures
graph_title Temperatures reported by Dell OMSA
graph_args --base 1000 --lower-limit 0
graph_scale no
graph_vlabel degrees celsius
graph_category sensors
EOF
    foreach my $temp (sort keys %{$sensors{'temps'}}) {
      print <<EOF;
temperature_$temp.label $sensors{'temps'}{$temp}{'name'}
temperature_$temp.type GAUGE
temperature_$temp.draw LINE2
EOF
      if(defined($sensors{'temps'}{$temp}{'warning_min'}) and $sensors{'temps'}{$temp}{'warning_min'} ne "" and defined($sensors{'temps'}{$temp}{'warning_max'}) and $sensors{'temps'}{$temp}{'warning_max'} ne "") {
        print <<EOF;
temperature_$temp.warning $sensors{'temps'}{$temp}{'warning_min'}:$sensors{'temps'}{$temp}{'warning_max'}
EOF
      }
      if(defined($sensors{'temps'}{$temp}{'critical_min'}) and $sensors{'temps'}{$temp}{'critical_min'} ne "" and defined($sensors{'temps'}{$temp}{'critical_max'}) and $sensors{'temps'}{$temp}{'critical_max'} ne "") {
        print <<EOF;
temperature_$temp.critical $sensors{'temps'}{$temp}{'critical_min'}:$sensors{'temps'}{$temp}{'critical_max'}
EOF
      }
    }
  }
  exit(0);
}

if(defined($sensors{'fans'}) and scalar(keys %{$sensors{'fans'}})) {
  print("multigraph dell_omsa_fans\n");
  foreach my $fan (sort keys %{$sensors{'fans'}}) {
    print("fan_" . $fan . "_rpm.value " . $sensors{'fans'}{$fan}{'value'} . "\n");
  }
}
if(defined($sensors{'temps'}) and scalar(keys %{$sensors{'temps'}})) {
  print("multigraph dell_omsa_temperatures\n");
  foreach my $temp (sort keys %{$sensors{'temps'}}) {
    print("temperature_" . $temp . ".value " . $sensors{'temps'}{$temp}{'value'} . "\n");
  }
}

exit(0);
